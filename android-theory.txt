Урок 3
Цикл жизни Activity
одно Activity - одно окно 
для взаимодействия пользователя с приложением (системой)
AppCompatActivity() - обращается к системе, создает окно
layout file - разметка экрана...
 <activity
            android:name=".Activity2"
            android:exported="false">
            <meta-data
                android:name="android.app.lib_name"
                android:value="" />
        </activity>
декларация в манифесте нового активити

<intent-filter>
        <action android:name="android.intent.action.MAIN" />

        <category android:name="android.intent.category.LAUNCHER" />//открывается при нажатии на иконку
</intent-filter>

ЦИКЛ ЖИЗНИ АКТИВИТИ
1. onCreate - запускается ОДИН РАЗ, когда активити уже готово, ресурсы все загрузились (готовы), 
можно писать код (ошибки не будет)
override fun onCreate(savedInstanceState: Bundle?) {
   super.onCreate(savedInstanceState)
   setContentView(R.layout.activity_main)
}
	|
	v
2. onStart()
	|
	v
3. onResume()
	|
	v
ПРИЛОЖЕНИЕ РАБОТАЕТ
на этом этапе больше не запуститься onCreate, onStart (нужен Restart()), onResume
	|
	v
Например, другое активити вышло впереди текущего активити
4. Приложение вошло в onPause() - все процессы тормозятся

ВАЖНО: БАЗУ ДАННЫХ ОТКРЫВАТЬ (присваивать переменные?) В onResume(),
так как после 5. onPause() (-> onResume()) и 6. onStop() (-> onStart()) (- перезапуск)
например, в onPause() будет закрытие БД, а открывалась она в onCreate() - 
вызывается один раз - бд больше не откроется - ПРОБЛЕМА!

5. onPause() - поверх экрана другой экран (сообщение)
6. onStop() (вызывает и onPause()) - основной активити невидим на экране
также на п. 5 и 6 процессы приложения могут быть уничтожены (память освобождена)
из-за нехватки ресурсов устройства (КРАЙНИЙ СЛУЧАЙ) (-> onCreate())
	|
	v
7. onDestroy() - выход из активити, активити разрушается, данные освобождаются
Вызывается при выходе из приложения

Более подробно на https://neco-desarrollo.es/activity


Урок 4
Logcat 
Log.e - error 
Log.d - debug
Log.w - warning
Log.v - verbose (подробности)
Log.i - info

TAG для того, чтобы фильтровать логи
можно назвать тэг именем активити

Примечание
во время onPause и onStop приложение не разрушено, оно на фоне
Поэтому нужно в этих функциях освободить ресурсы и остановить процессы (пр: бд),
чтобы освободить систему до того момента, как пользователь не вернется в наше приложение

Урок 5
все элементы на экране - view

Урок 6-8
Переменные
var - можно перезаписать (например, счетчик)
val (литерал) - нельзя перезаписать переменную, только читать (константа) (например, findViewById)
глобальные переменные - временная память, она будет освобождена при onDestroy (пока не разрушится активити)
локальные переменные - временная память, она будет освобождена при выходн из блока, где существует переменная

этим и плохи глобальные переменные, занимают место в памяти на протяжении работы всего активити.
лучше использовать локальные

CTRL + D копирование и вставка строки на следующую строку

int to string
7.toString()
.to<все что угодно>

var counter : Int = 0
0 - литерал (нельзя изменить 0) (- конкретное значение)
counter - переменная (изменяемая тк вар)

Типы данных
Int 
Byte (занимает меньше памяти чем Int)
Long

Выбирать с умом (для оптимизации)
https://kotlinlang.org/docs/basic-types.html

Типы данных в котлине - классы (у них много полезных функций (String !))

Способ 1
class MainActivity : AppCompatActivity() {
    var tv : TextView? = null // ? - может быть null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        tv = findViewById(R.id.tvTest)
        tv?.text = "downton abbey" // нужна проверка, что не null
    }
}

Способ 2 (правильный)
class MainActivity : AppCompatActivity() {
    lateinit var tv : TextView // lateinit var - инициализация будет позже

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        tv = findViewById(R.id.tvTest)
        tv.text = "downton abbey"
    }
}

Способ 3 (binding)
class MainActivity : AppCompatActivity() {
    lateinit var bind : ActivityMainBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        bind = ActivityMainBinding.inflate(layoutInflater)
        setContentView(bind.root)//root - контейнер, где лежат все элементы
        bind.tvTest.text = "downton abbey"
    }
}

findViewById после setContentView!!!

Урок 9
View Binding 
генерирует из xml-разметки (после setContentView) отдельный класс с доступом к элементам
Подключение в build.gradle (module)
android {
    ...
    buildFeatures {
	viewBinding true
    }
}

class MainActivity : AppCompatActivity() {
    lateinit var bind : ActivityMainBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        bind = ActivityMainBinding.inflate(layoutInflater)
        setContentView(bind.root)//root - контейнер, где лежат все элементы

        bind.btnTest.setOnClickListener {
            bind.tvTest.text = "downton abbey"
        }
    }
}


ConstraintLayout
layout_width (height) -> match_parent/wrap_content/<num>dp
во весь экран/по элементам внутри/указанный размер

Если не прикрепить элемент внутри ConstraintLayout, он окажется в вверхнем левом углу

Общие аттрибуты View
background - фон (backgroundTint у Button)
layout_width (height) - ширина высота, занимемая на экране (0dp = match_constraint = 
= заполнить место от одной точки до второй, поэтому должны быть обе точки)
visibility -> visible/invisible/gone 
элемент виден на экране/не виден на экране, но на него можно нажать/не виден на экране и не доступен (свернулся)

изменить аттрибут в коде например
bind.tvTest.visibility = View.GONE !!!

**Если случился баг в AndroidStudio (например, высвечивается view, которого нет)
Способ 1. Build -> Rebuild Project
Способ 2. File -> Invalidate Caches / Restart -> Invalidate and Restart

Форматированный вывод
val a = 123
val b = 56
bind.tvVar.text = "Result $a and $b = "


Урок 10-12 Условные операторы
Способ 1
if (currentPerson > maxPerson) {
  bind.tvResult.text = "Bad"
} else {
  bind.tvResult.text = "Good but bad because covid"
}
Способ 2 (если выдается только одно значение!) (else обязательно дб!)
bind.tvResult.text = if (currentPerson > maxPerson) {
  "Bad"
} else {
  "Good but bad because covid"
}
Способ 3
when(currentPerson) {
 in 0..maxPerson -> bind.tvResult.text = "Good but bad because covid"
 else -> bind.tvResult.text = "Bad"
}
Способ 4 (аналогично способу 2)
bind.tvResult.text =  when(currentPerson) {
  in 0..maxPerson -> "Good but bad because covid"
  else -> "Bad"
}
Способ 5
bind.tvResult.text =  when(currentPerson > maxPerson) {
  false -> "Good but bad because covid"
  true -> "Bad"
}
об операциях, разрешенных в when
https://kotlinlang.org/docs/control-flow.html#if-expression

*** В bind.tvResult.text не передавать форматированный ввод (разделить задачи)
temp = "friends"
bind.tvResult.text = temp

Пример enum
enum class Workers(val nameWorker: String, val salary: String) {
  PROGRAMMER("Лена", "100 тыс"),
  ARCHITECTURE("Катя","1 млн"),
  COMPOSITOR("Вика","3 млн"),
  DOCTOR("Соня","100 тыс"),
}

Урок 13
Ресурсы 
aapt генерирует R и категории, где хранятся переменные 
object R {
  object drawable {
    val icon = 4567890 
    //icon.png, <id>, R.drawable.icon (для кода), @drawable/icon (для xml)
  }
  object layout {    }
  object mipmap {    }
  object color {    }
  object string {    }
  object style {    }
}
**для именовании файлов в drawable нельзя использовать пробелы и заглавные буквы

Урок 14-15
Квалификаторы
Например: 
res -> drawable (по умл)
res -> drawable-v24 (версия api должна быть 24) (-v24 - квалификатор)
Имена картинок в файле должны быть одинаковыми (чтобы при поиске картинке он мог определить нужную ему папку)

Пример 1: перевод на разные языки
1 new -> Android Resource Directory (чтобы добавить папку в res)
2 Available qualifiers -> Locale -> Language -> ru -> Specific Region Only -> Any Region
3 Создалась папка values-ru. 
При запуске приложения на телефоне с русским языком сначала нужные значения для приложения будут искаться в этой папке.
Но так как там ничего нет, значения возьмутся из папки values по умл.
Копируем файл string.xml из values и вставляем в папку values-ru.
Название файла оставляем таким же!!!
***(Можно воспользоваться Translations Editor, чтобы определять значения в обеих папках)
4 android:text="@string/hello"
5 можно посмотреть как будет выглядеть на языке с помощью окна Design (без запуска приложения)
Выбрать язык над экраном панель Default (en-us)/Russian (ru)

Пример 2: перевод картинок на другой язык
1 res -> new -> Android Resource Directory
2 Resource type: drawable
3 Available qualifiers -> Locale -> Language -> ru -> Specific Region Only -> Any Region
4 Создать в обоих папках картинки с одним и тем же именем
5 tools:srcCompat="@drawable/picture1"

Пример 3: разный поворот (разметки) экрана (портрет и альбом)
***можно блокировать поворот экрана в коде
менять разметку можно в окне Design над экраном панель
ВАЖНО
Все элементы и на портрете, и на альбоме должны быть отображены
1 res -> new -> Android Resource Directory
2 Resource type: layout
3 Available qualifiers -> Orientation -> Chosen qualifiers -> Portrait -> Screen orientation -> Landscape
4 copy-paste activity_main.xml из папки layout в папку layout-land
5 можно редактировать landscape activity_main.xml

Урок 16-18
Создание активити
com.exampe=le.mfa -> new -> activity -> empty activity

AndroidManifest.xml
<activity
  android:name=".MainActivity"
  android:exported="true">

  <intent-filter> // указывает, что MainActivity - точка входа в приложение
    <action android:name="android.intent.action.MAIN" />

    <category android:name="android.intent.category.LAUNCHER" />
  </intent-filter>

  <meta-data
    android:name="android.app.lib_name"
    android:value="" />
</activity>
Другие активити нужно запускать самостоятельно

Переход на новую активити
// сообщение системе андройд, которая запустит активити
val intent : Intent = Intent(this, MainActivity::class.java)
startActivity(intent)//запустить активити

***В сообщение об ошибке обращать внимание на Caused by:

//закрытие текущего активити
bind.btnCloseActivity.setOnClickListener { 
  finish()
}

Передача данных между двумя активити 
1 MainActivity -> TestActivity1
MainActivity.kt 
bind.btnToTestActivity1.setOnClickListener {
  val intent = Intent(this, TestActivity1::class.java)
  intent.putExtra("key", "hello, what's your name?")// putExtra(key, value)
  startActivity(intent)
}
TestActivity1.kt
val message = intent.getStringExtra("key")
2 TestActivity1 -> MainActivity
проблема, так как MainActivity уже существует, а нам нужно передать ответ из TestActivity1 
если сделать так
  val intent = Intent(this, MainActivity::class.java)
  startActivity(intent)
то откроется еще одно (НОВОЕ) MainActivity (их будет два)
Тогда нужно переписать код на startActivityForResult
MainActivity.kt
    override fun onCreate(savedInstanceState: Bundle?) {
        bind.btnToTestActivity1.setOnClickListener {
            val intent = Intent(this, TestActivity1::class.java)
            intent.putExtra("key", "hello, what's your name?")// putExtra(key, value)
            startActivityForResult(intent, 100)//100 - идентификатор запроса
        }
    }
    // получение результата от TestActivity1
    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == 100 && resultCode == RESULT_OK && data != null) {
            val request = data.getStringExtra("answer_name")
            bind.tvMessage.text = request
        } else if (requestCode == 100 && resultCode == RESULT_CANCELED) {
            bind.tvMessage.text = "Вы не ввели ответ"
        }
    }
TestActivity1.kt
    override fun onCreate(savedInstanceState: Bundle?) {
        
        val message = intent.getStringExtra("key")
        bind.tvMessage.text = message

        bind.btnBackToMainActivity.setOnClickListener {
            val answer = bind.edtAnswer.text.toString()
            intent.putExtra("answer_name", answer)
            if (answer == "") {
                setResult(RESULT_CANCELED)
            } else {
                setResult(RESULT_OK, intent)
            }
            finish()
        }
    }

requestCode - идентификатор запроса (от какого к какому активити)
resultCode - индентификатор ответа 
data - данные, которые передаем (может быть null)
УСТАРЕВШИЙ СПОСОБ - startActivityForResult
Урок 25 НОВЫЙ СПОСОБ (kt и java) - https://developer.android.com/training/basics/intents/result?hl=ru#java
из TaskActivity1 нужно передать текст в MainActivity
MainActivity.kt
    lateinit var launcher: ActivityResultLauncher<Intent> // один запрос - один launcher

    override fun onCreate(savedInstanceState: Bundle?) {

        launcher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) {
            result: ActivityResult ->
            // request_code здесь не нужен, так как один запрос - один launcher
            if (result.resultCode == RESULT_OK && result.data != null) {
                val text = result.data!!.getStringExtra("key1").toString() //intent
                bind.textView.text = text
            }

        }

        bind.button2.setOnClickListener {
            val intent = Intent(this, TestActivity1::class.java)
            launcher.launch(intent)
        }

    }
TaskActivity1.kt
        bind.button.setOnClickListener {
            val intent = Intent(this, MainActivity::class.java)
            intent.putExtra("key1", "Hello, i'm from TaskActivity1")
            setResult(RESULT_OK, intent)
            finish()
        }

Урок 19 Массивы и Списки 
https://neco-desarrollo.es/2021/04/kotlin-массивы
- методы и теория
Массивы
        val numbers1 : Array<Byte> = arrayOf(1,2,3)
        val numbers2 : ByteArray = byteArrayOf(5,4,6)
        val numbers3 : ByteArray = ByteArray(4)//создает массив байтов с размером 4 и значениями по умл 0
        val numbers4 = arrayOfNulls<Byte>(4)//создает массив байтов с размером 4 и значениями по умл null
        var numbers5 = emptyArray<Byte>()//создает пустой массив байтов
        numbers5 = arrayOf(2,4,6,7)//его можно целиком перезаписать позже (после получения каких либо данных)

        Log.d("MyLog", "Numbers2 ${numbers5.contentToString()}")//[2, 4, 6, 7]
        //numbers5.reverse()//переворачивает оригинальный массив!!!
        val numbers6 =  numbers5.reversedArray()//возвращает перевернутый массив (но не меняет оригинальный!)
        Log.d("MyLog", "Numbers2 ${numbers6.contentToString()}")//[7, 6, 4, 2]

        Log.d("MyLog", "Numbers1 ${numbers1[0]}")
        Log.d("MyLog", "Numbers2 ${numbers2[2]}")

        numbers1[0] = 8
размер массива фиксированный, нельзя добавлять и удалять элементы, можно перезаписать или вывести
Списки
Неизменяемый (как массив) List - ТОЛЬКО ДЛЯ СЧИТЫВАНИЯ
        val numbers = listOf<Byte>(1,2,4,6,9)
        numbers[0] = 3//ERROR
        Log.d("MyLog", "Numbers2 $numbers")
Изменяемый (MutableList) ArrayList
        val numbers = arrayListOf<Byte>(1,2,4,6,9)//[1, 2, 4, 6, 9]
        numbers.add(3)//[1, 2, 4, 6, 9, 3]
        numbers.remove(2)//[1, 4, 6, 9, 3]
        numbers.addAll(arrayListOf(34,23,12,8))//[1, 4, 6, 9, 3, 34, 23, 12, 8]

Урок 20 
Цикл (https://neco-desarrollo.es/2021/04/kotlinциклы)
FOR
        val array = arrayOf("kiwi", "apple", "orange")
        for (index in 0..array.size-1) Log.d("MyLog", "Fruit: ${array[index]}")
        for (index in 0 until array.size) Log.d("MyLog", "Fruit: ${array[index]}")
!!!        for (index in array.indices) Log.d("MyLog", "Fruit: ${array[index]}")
!!!        for (element in array) Log.d("MyLog", "Fruit: $element")
array.indices //0..2 возвращает диапозон массива
!!!        for ((index, element) in array.withIndex()) Log.d("MyLog", "Fruit: $element | Index: $index")
УБЫВ        for (index in 5 downTo 1) Log.d("MyLog", "Index: $index")
ШАГ        for (index in 5 downTo 1 step 2) Log.d("MyLog", "Index: $index")
FOREACH
        array.forEach { element ->  Log.d("MyLog", "Element: $element")}
WHILE и DO WHILE как везде

Урок 22
ООП (в котлине много классов - рассмотрим самый простой)
Type 1 
class User {
    var id: String? = null
    var name: String? = null
    var age: Byte? = null
}
val user = User()
Type 2
class User(var id: String, var name: String, var age: Byte) {
    fun addAge(years: Byte) {
        age = (age + years).toByte()
    }
}
val user1 = User("1", "Lena", 20)
user1.addAge(5)//аргумент - 5
https://kotlinlang.org/docs/classes.html#constructors

Урок 23
Функции
https://kotlinlang.org/docs/functions.html#function-usage
Параметры по умл
fun read(
    b: ByteArray,
    off: Int = 0,
    len: Int = b.size,
) { /*...*/ }
infix fun (не мб параметров по умл и только один параметр)!!!!
class User(var id: String, var name: String, var age: Byte) {
    infix fun addAge(years: Byte) {
        age = age.plus(years).toByte()
    }
}
val user1 = User("1", "Lena", 20)
user1 addAge 5//аргумент - 5